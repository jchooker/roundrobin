@using Newtonsoft.Json
@model TechListApp.ViewModels.QueueViewModel

@Html.Hidden("CurrentSelectee", Model.CurrentSelectee, new {id = "CurrentSelectee"})
@Html.Hidden("LastSelectedIndex", Model.LastSelectedIndex, new {id = "LastSelectedIndex"})
@Html.Hidden("PrevLastSelectedIndex", Model.PrevLastSelectedIndex, new {id = "PrevLastSelectedIndex"})
@Html.Hidden("TechList", JsonConvert.SerializeObject(Model.Techs), new {id = "TechList"})
@Html.Hidden("AvailableTechList", JsonConvert.SerializeObject(Model.Techs.Where(t => t.IsAvailable).ToList()), new {id = "AvailableTechList"})
<script>
    const techViewModels = JSON.parse('@Html.Raw(Json.Serialize(Model.Techs))');

    var availableTechListJson = document.getElementById('AvailableTechList').value;
    var availableTechs = JSON.parse(availableTechListJson);

    // Get the values from the hidden fields using vanilla JS
    
</script>
@* @{
    //****SHOULD HAVE DONE THIS FROM THE GET-GO: MAP ID TO QUEUEID!!/
    // var idToQueueIdMap = Model.Techs.ToDictionary(t => t.Id, u => u.QueueId);
    // var queueIdToIdMap = Model.Techs.ToDictionary(t => t.QueueId, u => u.Id);
    int i = 0; //for index check
    var activeTechs = Model.Techs.Where(t => t.IsAvailable).OrderBy(t => t.QueueId).ToList(); //*******v2/
    var activeCount = activeTechs.Count; //*******v2/
    var lastAssignedQueueId = idToQueueIdMap[Model.LastSelectedIndex + 1]; //*******v2/
    var firstActiveQueueId = activeTechs.Any() ? activeTechs.First().QueueId : -1; //*******v2/

    //determine initial curr selectee (green btn)
    int currSelecteeQueueId = -1;
    if (activeCount > 0)
    {
        currSelecteeQueueId = activeTechs.First().QueueId;
        foreach (var tech in activeTechs)
        {
            if (tech.QueueId > Model.LastSelectedIndex)
            {
                currSelecteeQueueId = tech.QueueId;
                break;
            }
        }
    }
} *@
<input type="hidden" id="techViewModels" value="@Html.Raw(Json.Serialize(Model.Techs))" />
<div class="container-fluid" data-last-selected-index="@Model.LastSelectedIndex" data-prev-last-selected-index="@Model.PrevLastSelectedIndex">
@*     @for (int i = 0; i < Model.Techs.Count; i++) *@
    @foreach (var tech in Model.Techs)
    {
        @* var isLastAssigned = (tech.QueueId == idToQueueIdMap[Model.LastSelectedIndex + 1]); *@
        var isLastAssigned = tech.QueueId == Model.LastSelectedIndex;
        var isAvailable = tech.IsAvailable;
        var isCurrentSelectee = tech.QueueId == Model.CurrentSelectee;
        var isPrevLastAssigned = tech.QueueId == Model.PrevLastSelectedIndex;
        var isBasicBtn = (!isCurrentSelectee && !isLastAssigned) ? "btn-basic-light" : "";
        @* var isOnlyOneActive = (tech.IsAvailable && activeCount == 1); *@
        var isNextActive = isAvailable && !isLastAssigned; //<--not for scenarios where there is only 1 though?

        var auxBtnClasses = "btn col-1 my-2 border border-2 border-secondary d-flex align-items-center justify-content-center shadow hover-effect-1 bg-light";
        var techButtonClasses = "btn border col-6 text-center py-4 border-3 my-2";

        //var canOverride = (isActive && )

        if (isCurrentSelectee)
        {
            techButtonClasses += " btn-success text-warning border-warning";
        }

        else if (isLastAssigned)
        {
            techButtonClasses += " btn-danger text-light border-secondary";
        }

        @* var disabledAttrib = isLastAssigned || !isActive ? "disabled" : ""; *@
        var disabledAttrib = (!isCurrentSelectee) ? "disabled" : "";
        var ariaDisabled = disabledAttrib == "disabled" ? "true" : "false";
        var overrideVisibility = (isAvailable && !isCurrentSelectee) ? "visible" : "invisible";
        
        <div class="row align-items-stretch btn-row-group">
            <div class="@auxBtnClasses opacity-75 me-4 toggle-btn-@tech.QueueId" data-parent-index="@tech.QueueId" data-id="@tech.Id" data-queue-id="@tech.QueueId">
                <img src="~/img/toggle1.webp" class="rounded img-fluid @(isAvailable ? "black-to-green" : "black-to-red")" alt="toggle" />
            </div>
            @* ^^need to have these update themselves in json file when the user deactivates *@
            <div class="@techButtonClasses @disabledAttrib @isBasicBtn tech-queue-btn-@tech.QueueId" data-index="@tech.QueueId" data-added-as-id="@tech.QueueId" aria-disabled="@ariaDisabled" data-id="@tech.Id">
                <h2>@tech.Name</h2>
            </div>
            <div class="@auxBtnClasses opacity-50 ms-4 override-btn-@tech.QueueId @overrideVisibility" data-parent-index="@tech.QueueId" data-id="@tech.Id" data-queue-id="@tech.QueueId">
                <img src="~/img/down_left.webp" class="rounded img-fluid" alt="down-left-arrow" />
            </div>
        </div>
    }
</div>
@*   %%%%%%%%%%  //{
       //var tech = Model.Techs[i]; %%%%%%%%%%%%*@
@*%%%%%%%%%%         var techName = tech.Name;
        var nextIndex = (i + 1) % Model.Techs.Count;
        var nextWithZero = (tech.IsOnlyOneAvailable) ? tech.QueueId : (Model.LastSelectedIndex + 1) % Model.Techs.Count; %%%%%%%%%*@
@*   %%%%%%%%%%%%%%%      //***SERIOUS REWORK OF NEXTWITHZERO AND OVERRIDE BTNS NEEDED! 08/09/2024
        //if (Model.LastSelectedIndex == Model.Names.Count - 1) //<--take care of this in click event response?%%%%%%%%%%%%%%%% *@
@* ***************        var isLastSelected = (i == Model.LastSelectedIndex);
        var auxBtnClasses = "btn col-1 my-2 border border-2 border-secondary d-flex align-items-center justify-content-center shadow hover-effect-1 bg-light";************** *@
        @*%%%%%%%%%%%%%% //*************NEED TO FIGURE OUT ALL QUEUEID VS ID SCENARIOS!!!!!!!!!! %%%%%%%%%%%%%*@
@*********         var nextColorClass = (i == nextWithZero) ? "border-warning btn-success shadow text-warning" : ""; ***********@
        @* var disabledAttrib = (i == nextWithZero) ? "" : "disabled"; *@
@**************         var disabledAttrib = (tech.IsAvailable) ? "" : "disabled";
        var disabledAria = (i == nextWithZero) ? "false" : "true";
        var prevColorClass = (i == Model.LastSelectedIndex) ? "btn-danger border-secondary" : "";
        var defaults = ((i != Model.LastSelectedIndex) && (i != nextWithZero)) ? "border-secondary" : "shadow-sm";
        var whetherXVisible = (i != nextWithZero) ? "visible" : "invisible";
        var greenOrRed = (tech.IsAvailable) ? "black-to-green" : "black-to-red";
        <div class="row align-items-stretch btn-row-group">
            <div class="@auxBtnClasses opacity-75 me-4 toggle-btn-@i" data-parent-index="@tech.QueueId" data-id="@tech.Id" data-added-as-id="@i">
                <img src="~/img/toggle1.webp" class="rounded img-fluid @greenOrRed" alt="toggle" />
            </div>
            <div class="btn border col-6 text-center py-4 border-3 my-2 slide-in-success slide-out-success slide-out-danger  @nextColorClass @prevColorClass @defaults @disabledAttrib" data-index="@i" data-added-as-id="@i" aria-disabled="@disabledAria">
                <h2>@techName</h2>
            </div> *************@
            @* wrap in a span to make it hoverable *@
@*********             <div class="@auxBtnClasses @whetherXVisible opacity-50 ms-4 override-btn-@i" data-parent-index="@tech.QueueId" data-id="@tech.Id" data-added-as-id="@i">
                <img src="~/img/down_left.webp" class="rounded img-fluid" alt="down-left-arrow" />
            </div>
        </div>
        i++;
    } *********@
@********</div>***********@

@section Styles {
    <link rel="stylesheet" href="~/css/techs.css" />
}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.9/signalr.min.js"></script>
    <script src="~/js/techs.js" type="text/javascript"></script>
}
